- Class: meta
  Course: Programação em R
  Lesson: Gráficos Básicos
  Author: David Kane, Kelin Gonçalves de Oliveira (Tradução e Modificação)
  Type: Standard
  Organization: Williams College
  Version: 2.2.0

- Class: text
  Output: Uma das vantagens do R em relação às outras linguagens de programação, é a facilidade de criar gráficos com qualidade para serem publicadas. Nesta lição, você aprenderá sobre os gráficos básicos em R. 

- Class: text
  Output: Nós não iremos cobrir os tópicos mais avançados de gráficos em R nesta lição.

- Class: cmd_question
  Output: Para iniciar, carregue o dataframe de nome cars com data(cars).
  CorrectAnswer: data(cars)
  AnswerTests: omnitest(correctExpr='data(cars)')
  Hint: Digite data(cars) para carregar os dados.

- Class: text
  Output: De início, nós iremos trabalhar com dataframes simples, já que o objetivo principal é apresentar diversas funções de gráficos e seus argumentos. Claro que conjuntos de dados mais complexos produzem grafos mais interessantes.

- Class: cmd_question
  Output: Abra a ajuda para entender o dataset cars.
  CorrectAnswer: ?cars
  AnswerTests: any_of_exprs('?cars', 'help(cars)')
  Hint: Digite ?cars ou help(cars) para visualizar a página de ajuda que contém os detalhes do dataframe cars.

- Class: text
  Output: 'Como você pode observar na página de ajuda, cars contém apenas duas variáveis coletadas: velocidade (mph) e distância de parada (ft). Observe que o dado é de 1920.'

- Class: cmd_question
  Output: Aplique a função head() no dataset cars.
  CorrectAnswer: head(cars)
  AnswerTests: omnitest(correctExpr='head(cars)')
  Hint: Digite head(cars) para ver o topo do dataframe.

- Class: text
  Output: Sempre antes de iniciar com os plots, é bom ter uma idéia de como são os dados que você está trabalhando. Para obter mais informações sobre teu conjunto de dados, comandos-chave do R como dim(), names(), head(), tail() e summary(), vão te ajudar bastante.

- Class: cmd_question
  Output: Utilize a função plot() no conjunto de dados cars para criar um gráfico de dispersão (scatter plor). 
  CorrectAnswer: plot(cars)
  AnswerTests: omnitest(correctExpr='plot(cars)')
  Hint: Digite plot(cars) para criar um scatter plot.

- Class: text
  Output: 'Como sempre, a linguagem R é sempre bastante sensitiva quanto ao tipo de informação que você forneceu, por exemplo: o R notou que a tablea de dados que você inseriu contém apenas duas colunas, então ele assumiu que deve plotar uma coluna versos a outra.'

- Class: text
  Output: Como não foi fornecido nenhum nome para os eixos do gráfico, R também presumiu que deve nomear os eixos conforme o nome das colunas. A fim de melhorar a visualização, a linguagem também inseriu marcações nos números inteiros nos eixos.

- Class: text
  Output: Vamos explorar a função plot().

- Class: cmd_question
  Output: Abra a página de ajuda sobre plot(). 
  CorrectAnswer: ?plot
  AnswerTests: any_of_exprs('?plot', 'help(plot)')
  Hint: Digite ?plot ou help(plot) para visualizar a página de ajuda de plot().

- Class: text
  Output: O help de plot() mostra os argumentos necessários que a função recebe para funcionar, sendo que há argumentos obrigatórios (sem os quais a função não funciona) e os opcionais (geramente relacionados com personalização). Os argumentos mais importantes da função plot são x e y, que correspondem às variáveis a serem plotadas (no teu caso, x é speed e y é dist). 

- Class: text
  Output: 'Para as próximas questões, vamos especificar na função os nomes dos argumentos que vão receber as variáveis a serem plotadas, ou seja, ao invés de digitar plot(cars) ou plot(cars$speed, cars$dist) que também funcionam, vamos usar: plot(x = cars$speed, y = cars$dist).'

- Class: cmd_question
  Output: Utilize o comando plot() para plotar o gráfico de dispersão invertido, com dist no eixo x e velocidade no eixo y. Faça conforme o exemplo que mostramos acima.
  CorrectAnswer: plot(x = cars$dist, y = cars$speed)
  AnswerTests: omnitest(correctExpr='plot(x = cars$dist, y = cars$speed)')
  Hint: Digite plot(x = cars$dist, y = cars$speed) para criar o gŕafico.

- Class: text
  Output: Observe que este resultado é diferente do obtido por plot(cars). Neste caso, além de termos trocado a ordem dos eixos, o R não teve a certeza de que você deseja utilizar os nomes das colunas para nomear, então preferiu apenas utilizar os argumentos que você passou como nome dos eixos (cars$speed, por exemplo).

- Class: text
  Output: Provavelmente, faz mais sentido ter a velocidade dos carros no eixo x, já que a distância de freagem é uma variável em função da velocidade (quanto maior a velocidade, mais espaço o carro precisará para parar completamente) e não o contrário.

- Class: text
  Output: 'Há outras maneiras de utilizar o comando de plot, utilizando uma "fórmula", por exemplo: plot(dist ~ speed, cars). No entanto, ainda não iremos utilizar esta forma. Primeiro, vamos explorar os argumentos opcionas da função.'
  

- Class: cmd_question
  Output: Recrie o plot (com velocidade no eixo x e distância no eixo y) e coloque o nome do eixo x como "Velocidade (mph)", inserindo o argumento xlab = "nome_do_eixoX". 
  CorrectAnswer: plot(x = cars$speed, y = cars$dist, xlab = "Velocidade (mph)")
  AnswerTests: omnitest(correctExpr='plot(x = cars$speed, y = cars$dist, xlab = "Velocidade (mph)")')
  Hint: Coloque plot(x = cars$speed, y = cars$dist, xlab = "Velocidade (mph)") para criar o plot.

- Class: cmd_question
  Output: Repita o comando mantendo o nome do eixo x, mas inserindo o nome "Distância (ft)" para como nome do eixo y com ylab = "nome_do_eixoY". 
  CorrectAnswer: plot(x = cars$speed, y = cars$dist, xlab = "Velocidade (mph)", ylab = "Distância (ft)")
  AnswerTests: omnitest(correctExpr='plot(x = cars$speed, y = cars$dist, xlab = "Velocidade (mph)", ylab = "Distância (ft)")')
  Hint: Digite plot(x = cars$speed, y = cars$dist, xlab = "Velocidade (mph)", ylab = "Distância (ft)") para criar o plot.

- Class: text
  Output: Também é interessante colocar um título no gráfico, a fim de deixá-lo mais didático.

- Class: cmd_question
  Output: Faça o gráfico conforme foi feito acima e ao final dos argumentos, coloque o título "Velocidade do Carro vs Distância de Freagem". O argumento para adicionar títulos é main = "título".
  CorrectAnswer: plot(x = cars$speed, y = cars$dist, xlab = "Velocidade (mph)", ylab = "Distância (ft)", main = "Velocidade do Carro vs Distância de Freagem")
  AnswerTests: omnitest(correctExpr='plot(x = cars$speed, y = cars$dist, xlab = "Velocidade (mph)", ylab = "Distância (ft)", main = "Velocidade do Carro vs Distância de Freagem")')
  Hint: Digite plot(x = cars$speed, y = cars$dist, xlab = "Velocidade (mph)", ylab = "Distância (ft)", main = "Velocidade do Carro vs Distância de Freagem") para criar o plot.

- Class: text
  Output: Como você deve ter visto, o ?plot ou help(plot) retorna a sintaxe de alguns argumentos apenas. Para podermos explorar outras funções gráficas, vamor olhar para a função par() que, quando combinada com plot fornece várias outras formas de melhorar o gráfico.
  
- Class: text
  Output: 'Par pode ser um tanto quanto confusa, uma vez que seus argumentos podem ser utilizados dentro da função plot (ex: plot(cars, col=3), sendo que col especifica a cor dos pontos) ou fora, por exemplo: par(col=3) seguido de plot(cars). Para facilitar o entendimento, iremos utilizar os parâmetros sempre dentro da função plot.'

- Class: cmd_question
  Output: Olhe a página de ajuda para a função par. Veja a lista de parâmetros adicionais que podem ser inseridos em plot na seção "Graphical Parameters".
  CorrectAnswer: ?par
  AnswerTests: any_of_exprs('?par', 'help(par)')
  Hint: Digite ?par ou help(par) para visualizar a página de ajuda desta função.
  
- Class: cmd_question
  Output: Plote cars da maneira mais simples (usando apenas plot(cars) SEM os parâmetros de nome de eixo ou título) ,mude as cores dos pontos de cars para vermelho. (Use col = 2 dentro da função plot())
  CorrectAnswer: plot(cars, col = 2)
  AnswerTests: omnitest(correctExpr='plot(cars, col = 2)')
  Hint: Digite plot(cars, col = 2).

- Class: cmd_question
  Output: Limite o eixo x para as velocidades 10 até 15, usando xlim = c(10, 15). 
  CorrectAnswer: plot(cars, xlim = c(10, 15))
  AnswerTests: omnitest(correctExpr='plot(cars, xlim = c(10, 15))')
  Hint: Digite plot(cars, xlim = c(10, 15)).

- Class: cmd_question
  Output: Você também pode alterar o formato dos pontos do plot, veja ?points para mais detalhes.
  CorrectAnswer: ?points
  AnswerTests: any_of_exprs('?points', 'help(points)')
  Hint: Digite ?points ou help(points) para acessar os parâmetros que possibilitam trocar a forma dos pontos do gráfico.

- Class: cmd_question
  Output: Faça o plot(cars), mas troque as bolinhas por triângulos. (Use pch = 2.) 
  CorrectAnswer: plot(cars, pch = 2)
  AnswerTests: omnitest(correctExpr='plot(cars, pch = 2)')
  Hint: Coloque plot(cars, pch = 2) para obter o resultado desejado.

- Class: text
  Output: Argumentos como "col" e "pch" não são muito intuitivos, por esse motivo, outros pacotes mais modernos (como ggplot2 e lattice) foram criados para facilitar estas modificações de detalhes.

- Class: text
  Output: Mas é muito importante saber como estes parâmetros funcionam, uma vez que estes novos pacotes foram modelados com base no funcionamento dos gráficos básicos.

- Class: text
  Output: 'Vamos ver novas funções de gráficos, os boxplots. Para isso, precisamos carregar um novo conjunto de dados um pouco maior que o anrterior: o mtcars, que contém 11 medições para 32 carros.'

- Class: cmd_question
  Output: Carregue o dataset com a função data() 
  CorrectAnswer: data(mtcars)
  AnswerTests: omnitest(correctExpr='data(mtcars)')
  Hint: Digite data(mtcars) para carregar o conjunto de dados no teu ambiente de trabalho.

- Class: cmd_question
  Output: Utilize a função View() para visualizar como são os teus dados.
  CorrectAnswer: View(mtcars)
  AnswerTests: omnitest(correctExpr='View(mtcars)')
  Hint: Digite View(mtcars) para olhar como os dados estão dispostos no dataframe.

- Class: text
  Output: Para explorar outros aspectos dos dados (o significado das siglas das colunas, por exemplo), digite play() para pausar um pouco o curso e testar outros comandos que não estejam no curso (você pode ver a página de ajuda para mtcars a fim de descobrir o nome das colunas) e, quando tiver terminado, digite nxt() para voltar ao curso de onde você parou.

- Class: cmd_question
  Output: Veja o help para boxplot(). 
  CorrectAnswer: ?boxplot
  AnswerTests: any_of_exprs('?boxplot', 'help(boxplot)')
  Hint: Digite ?boxplot or help(boxplot) para visualizar os parâmetros que boxplot recebe.

- Class: text
  Output: Comece a utilizar a fórmula da qual vimos acima para plotar a relação entre duas variáveis do dataframe. A disposição dos argumentos na forma de "fórmula" é representada por um til ("~"), que indica a relação entre as variáveis de entrada. Colocar algo do tipo mpg ~ cyl irá plotar a relação entre o consumo de combustível medido em milhas por galão (mpg) no eixo Y e o número de cilindros dos carros (cyl) no eixo X.

- Class: cmd_question
  Output: Teste a função boxplot() com os argumentos formula = mpg ~ cyl e o argumento data = mtcars para criar o gráfico.
  CorrectAnswer: boxplot(formula = mpg ~ cyl, data = mtcars)
  AnswerTests: omnitest(correctExpr='boxplot(formula = mpg ~ cyl, data = mtcars)')
  Hint: Coloque boxplot(formula = mpg ~ cyl, data = mtcars) para criar o boxplot.

- Class: text
  Output: Pelo boxplot você pode agora ver de maneira mais fácil que  o consumo de combustível é muito menor para carros com mais cilindros. Caso deseje, você pode utilizar o play() para brincar com os argumentos de título, nome de axis, cores e formas que vimos para a função plot(). Para voltar ao curso, é só digitar nxt().

- Class: text
  Output: Em alguns momentos, é interessante saber se os teus dados seguem uma distribuição normal, a fim de saber qual estatística é melhor aplicada em passos posteriores. Para isso, a função hist() será bem útil por criar histogramas que recebem um vetor único como argumento obrigatório. 

- Class: cmd_question
  Output: Use hist() com o vetor hist(mtcars$drat) para criar um histograma das medidas de proporção do eixo traseiro. Observe se a distribuição dos dados segue uma gaussiana.
  CorrectAnswer: hist(mtcars$drat)
  AnswerTests: any_of_exprs('hist(mtcars$drat)', 'hist(x = mtcars$drat)')
  Hint: Coloque o comando hist(mtcars$drat) para criar o histograma.

- Class: text
  Output: Nessa lição, você aprendeu a como utilizar funções básicas para criação de gráficos em R, mas ainda há muito mais a ser explorado. O melhor jeito de continuar aprendendo é utilizando novos pacotes.

- Class: mult_question
  Output: Você gostaria de informar alguém sobre o teu sucesso em completar esta lição?
  CorrectAnswer: NULL
  AnswerChoices: Sim; Não
  AnswerTests: notify()
  Hint: NULL
