- Class: meta
  Course: Programação em R
  Lesson: Matrizes e Data Frames
  Author: Nick Carchedi, Clarice S. Groeneveld (tradução)
  Type: Standard
  Organization: JHU Biostat
  Version: 2.2.0

- Class: text
  Output: Nesta lição, vamos cobrir matrizes e data frames. Ambos representam tipos de dados 'retangulares', o que quer dizer que são usados para armazenar dados tabulares, com linhas e colunas.

- Class: text
  Output: A principal diferença, como você verá, é que matrizes podem conter somente uma classe de dados, enquanto data frames podem consistir de várias classes de dados diferentes.

- Class: cmd_question
  Output: Vamos criar um vetor contendo os números de 1 a 20 usando o operador `:`. Armazene o resultado em uma variável chamada meu_vetor.
  CorrectAnswer: meu_vetor <- 1:20
  AnswerTests: omnitest(correctExpr='meu_vetor <- 1:20')
  Hint: Você aprendeu sobre o operador `:` na lição sobre sequências. Se você quiser criar um vetor contendo os números 1, 2 e 3 (nesta ordem), você pode usar tanto c(1, 2, 3) quanto 1:3. Neste caso, queremos os números de 1 a 20 armazenados em uma variável chamada meu_vetor. Além disso, lembre-se que você não precisa da função c() quando usar `:`.

- Class: cmd_question
  Output: Veja o conteúdo do vetor que você criou.
  CorrectAnswer: meu_vetor
  AnswerTests: omnitest(correctExpr='meu_vetor')
  Hint: Digite meu_vetor para ver seus conteúdos.

- Class: cmd_question
  Output: A função dim() nos apresenta as 'dimensões' de um objeto. O que acontece se nós fizermos dim(meu_vetor)? Teste para ver o resultado.
  CorrectAnswer: dim(meu_vetor)
  AnswerTests: omnitest(correctExpr='dim(meu_vetor)')
  Hint: Só digite dim(meu_vetor) para ver o que acontece.

- Class: cmd_question
  Output: Claramente, isto não é muito útil! Já que meu_vetor é um vetor, ele não tem um atributo 'dim' (então é só nulo (NULL)), mas podemos encontrar seu comprimento usando a função length(). Tente isso agora.
  CorrectAnswer: length(meu_vetor)
  AnswerTests: omnitest(correctExpr='length(meu_vetor)')
  Hint: Digite length(meu_vetor) para ver o comprimento do vetor que você acabou de criar.

- Class: cmd_question
  Output: Ah! Era isso que queríamos. Mas, o que acontece se você der a meu_vetor um atributo `dim`. Vamos testar. Digite dim(meu_vetor) <- c(4, 5).
  CorrectAnswer: dim(meu_vetor) <- c(4, 5)
  AnswerTests: omnitest(correctExpr='dim(meu_vetor) <- c(4, 5)')
  Hint: Digite dim(meu_vetor) <- c(4, 5) para dar um atributo `dim` ao meu_vetor.

- Class: text
  Output: Não tem problema se o último comando pareceu um pouco estranho. Ele deveria! A função dim() permite que você receba ou atribua o atributo `dim` para um objeto R. Neste caso, nós atribuímos o valor c(4, 5) ao atributo `dim` de meu_vetor.

- Class: cmd_question
  Output: Use dim(meu_vetor) para confirmar que atribuímos o atributo `dim` corretamente.
  CorrectAnswer: dim(meu_vetor)
  AnswerTests: omnitest(correctExpr='dim(meu_vetor)')
  Hint: Apenas digite dim(meu_vetor) para se certificar que o atributo `dim` foi estabelecido.

- Class: cmd_question
  Output: Outra forma de fazer isso é chamando a função attributes() com meu_vetor. Tente isso agora.
  CorrectAnswer: attributes(meu_vetor)
  AnswerTests: omnitest(correctExpr='attributes(meu_vetor)')
  Hint: O comando attributes(meu_vetor) vai mostrar todos os atributos para o objeto meu vetor.

- Class: text
  Output: Assim como na aula de matemática, quando lidamos com objetos bi-dimensionais (pense em uma mesa retangular), o primeiro número é o número de linhas e o segundo é o número de colunas. Portanto, acabamos de dar a meu_vetor 4 linhas e 5 colunas.

- Class: cmd_question
  Output: Mas espere! Isso não parece mais um vetor. Bem, não é. Agora é uma matriz. Acesse os conteúdos de meu_vetor para ver sua aparência.
  CorrectAnswer: meu_vetor
  AnswerTests: omnitest(correctExpr='meu_vetor')
  Hint: Digite meu_vetor para ver seus conteúdos.

- Class: cmd_question
  Output: Agora, vamos confirmar que é realmente uma matriz usando a função class(). Digite class(meu_vetor) para entender o que quero dizer.
  CorrectAnswer: class(meu_vetor)
  AnswerTests: omnitest(correctExpr='class(meu_vetor)')
  Hint: Digite class(meu_vetor) para ver a classe de meu_vetor.

- Class: cmd_question
  Output: Realmente, meu_vetor agora agora é uma matriz. Precisamos armazená-lo em uma nova variável para lembrar o que ele é. Guarde o valor de meu_vetor em uma nova variável chamada minha_matriz.
  CorrectAnswer: minha_matriz <- meu_vetor
  AnswerTests: omnitest(correctExpr='minha_matriz <- meu_vetor')
  Hint: Já que não podemos mudar o nome da variável meu_vetor, vamos desginar o seu valor a uma nova variável com minha_matriz <- meu_vetor.

- Class: text
  Output: O exemplo que usamos até agora tem a intenção de ilustrar que uma matriz é simplesmente um vetor atômico com um atributo dimensão. Uma forma mais direta que criar a mesma matriz é usando a função matrix().

- Class: cmd_question
  Output: Chame o arquivo de ajuda para a função matrix() usando a função `?`.
  CorrectAnswer: ?matrix
  AnswerTests: omnitest(correctExpr='?matrix')
  Hint: O comando ?matrix vai fazer a mágica.

- Class: cmd_question
  Output: Agora, olhe a documentação para a função matrix() e veja se você consegue entender como criar uma matriz contendo os mesmos números (de 1 a 20) e dimensões (4 linhas, 5 colunas) chamando a função matrix(). Guarde o resultado em uma variável chamada outra_matriz.
  CorrectAnswer: outra_matriz <- matrix(1:20, nrow=4, ncol=5)
  AnswerTests: omnitest(correctExpr='outra_matriz <- matrix(1:20, nrow=4, ncol=5)')
  Hint: Chame a função matrix() com três argumentos – 1:20, o número de linhas e o número de colunas. Cuide para especificar argumentos com seus nomes corretos e armazenar o resultado em outra_matriz (não minha_matriz).

- Class: cmd_question
  Output: Finalmente, vamos confirmar que minha_matriz e outra_matriz são realmente idênticas. A função identical() vai nos dizer se os dois primeiros argumentos são os mesmos. Tente usar ela.
  CorrectAnswer: identical(minha_matriz, outra_matriz)
  AnswerTests: any_of_exprs('identical(minha_matriz, outra_matriz)', 'identical(outra_matriz, minha_matriz)')
  Hint: Se não tiver certeza de o que fazer, leia a documentação para identical() usando a função `?`.

- Class: text
  Output: Agora, imagine que os números na nossa tabela representam medidas de um experimento clínico, onde cada linha é um paciente e cada coluna representa uma variável para qual medidas foram tiradas.

- Class: text
  Output: Nós podemos querer nomear nossas linhas para sabermos qual número pertence a qual paciente no experimento. Uma forma de fazer isso é adicionar uma coluna à matriz, que contém os nomes das quatro pessoas.

- Class: cmd_question
  Output: Vamos começar criando um vetor de caracteres contendo os nomes de nossos pacientes -- Bill, Gina, Kelly, and Sean.  Lembre-se que aspas duplas contam ao R que algo é uma string de caracteres. Guarde o resultado em um vetor chamado pacientes.
  CorrectAnswer: pacientes <- c("Bill", "Gina", "Kelly", "Sean")
  AnswerTests: omnitest(correctExpr='pacientes <- c("Bill", "Gina", "Kelly", "Sean")')
  Hint: Certifique-se que a primeira letra de cada nome está maiúscula e guarde o resultado em uma variável pacientes. Não misture a ordem dos pacientes! Isso seria desastroso!

- Class: cmd_question
  Output: Agora vamos utilizar a função cbind() para 'combinar colunas'. Não se preocupe em armazenar o resultado em uma nova variável. Só chame cbind para dois argumentos -- o vetor pacientes e minha_matriz.
  CorrectAnswer: cbind(pacientes, minha_matriz)
  AnswerTests: omnitest(correctExpr='cbind(pacientes, minha_matriz)')
  Hint: Digite cbind(pacientes, minha_matriz) para adicionar os nomes de nossos pacientes à matriz de números.

- Class: text
  Output: Algo está estranho no nosso resultado! Parece que combinar o nosso vetor de caracteres com nossa matriz de números fez com que tudo ficasse entre aspas. Isso significa que temos uma matriz de caracteres, que não é o que queremos.

- Class: text
  Output: Se você se lembrar do início desta lição, contei para você que matrizes podem conter apenas UMA classe de dados. Portanto, quando tentamos combinar um vetor de caracteres com uma matriz numérica, o R 'coagiu' números para caracteres, por isso as aspas.

- Class: text
  Output: Isso é chamado de 'coerção implícita', porque você não pediu para isso acontecer. Só aconteceu. Mas por que o R não converteu os nomes dos nossos pacientes para números? Deixarei você ponderar a resposta sozinho.

- Class: cmd_question
  Output: Então, ainda precisamos resolver a questão de como incluir os nomes de nossos pacientes na tabela sem destruir a integridade dos dados números. Tente o comando a seguir – meus_dados <- data.frame(pacientes, minha_matriz)
  CorrectAnswer: meus_dados <- data.frame(pacientes, minha_matriz)
  AnswerTests: omnitest(correctExpr='meus_dados <- data.frame(pacientes, minha_matriz)')
  Hint: Digite meus_dados <- data.frame(pacientes, minha_matriz) para podermos explorar o que acontece.

- Class: cmd_question
  Output: Agora veja os conteúdos de meus_dados para ver o que temos.
  CorrectAnswer: meus_dados
  AnswerTests: omnitest(correctExpr='meus_dados')
  Hint: Digite meus_dados para ver seus conteúdos.

- Class: text
  Output: Parece que a função data.frame() nos permitiu guardar nosso vetor de caracteres de nomes ao lado de nossa matriz de números. Que era exatamente o que queríamos!

- Class: text
  Output: Nos bastidores, a função data.frame() recebe qualquer número de argumentos e retorna um único objeto de classe `data.frame` composto dos objetos originais.

- Class: cmd_question
  Output: Vamos confirmar isso chamando a função class() no nosso data frame recém criado.
  CorrectAnswer: class(meus_dados)
  AnswerTests: omnitest(correctExpr='class(meus_dados)')
  Hint: A função class() recebe um argumento -- o objeto do qual você quer determinar a classe.

- Class: text
  Output: Também é possível designar nomes às colunas e linhas de um data frame, que apresenta outra possibilidade de determinar que linha de valores de nossa tabela pertence a cada paciente.

- Class: text
  Output: Entretanto, já que já resolvemos esse problema, vamos resolver um problema diferente determinando nomes para as colunas de nosso data frame para sabermos que tipo de medida cada coluna representa.

- Class: cmd_question
  Output: Já que temos seis colunas (incluindo nomes de pacientes), vamos precisar primeiro criar um vetor contendo um elemento para cada coluna. Crie um vetor de caracteres chamado cnomes que contém os seguintes valores (em ordem) -- "paciente", "idade", "peso", "pressão", "avaliação" e "teste"
  CorrectAnswer: cnomes <-c("paciente", "idade", "peso", "pressão", "avaliação", "teste")
  AnswerTests: omnitest(correctExpr='cnomes <-c("paciente", "idade", "peso", "pressão", "avaliação", "teste")')
  Hint: Certifique-se que os nomes estão todos em letra minúscula, entre aspas, separados com vírgulas. Não esqueça de usar a função c().

- Class: cmd_question
  Output: Agora, use a função colnames() para designar o atributo `colnames` (nomes de colunas) no nosso data frame. Isso é similar à forma que usamos a função dim() antes nessa lição.
  CorrectAnswer: colnames(meus_dados) <- cnomes
  AnswerTests: omnitest(correctExpr='colnames(meus_dados) <- cnomes')
  Hint: Try colnames(meus_dados) <- cnomes.

- Class: cmd_question
  Output: Vamos ver se isso funcionou. Visualize o conteúdo de meus_dados.
  CorrectAnswer: meus_dados
  AnswerTests: omnitest(correctExpr='meus_dados')
  Hint: Digite meus_dados no console e aperte ENTER.

- Class: text
  Output: Nessa lição, você aprendeu o básico sobre trabalhar com duas formas muito importantes e comuns de dados -- matrizes e data frames. Há muito mais para aprender e vamos cobrir tópicos mais avançados, particularmente com respeito a data frames, em lições futuras.

- Class: mult_question
  Output: Você gostaria de informar alguém sobre seu sucesso em completar essa lição?
  CorrectAnswer: NULL
  AnswerChoices: Sim; Não
  AnswerTests: notify()
  Hint: NULL
