- Class: meta
  Course: R Programming
  Lesson: Subconjuntos de Vetores
  Author: Nick Carchedi, Sheyla Trefflich (tradução)
  Type: Standard
  Organization: JHU Biostat
  Version: 2.2.0

- Class: text
  Output: Nesta lição, vamos ver como se extrai elementos de um vetor baseado em condições que iremos especificar.

- Class: text
  Output: Por exemplo, podemos estar somente interessados nos 20 primeiros elementos de um vetor, ou só nos elementos que não são NA, ou só naqueles que são positivos, ou correspondem a uma variável específica de interesse. No final dessa lição, você saberá lidar com todos esses cenários.

- Class: cmd_question
  Output: Criamos para você um vetor chamado x que contém 20 números em ordem aleatória (a partir de uma distribuição normal) e 20 NAs. Digite x agora para ver a aparência do vetor.
  CorrectAnswer: x
  AnswerTests: omnitest(correctExpr='x')
  Hint: Digite x para ver seu conteúdo.

- Class: text
  Output: A maneira como você informa ao R que você quer selecionar algum elemento em particular (ou seja, um 'subconjunto') a partir de um vetor é colocando um 'índice de vetor' entre colchetes logo após o nome do vetor.

- Class: cmd_question
  Output: 'Como exemplo, digite x[1:10] para ver os primeiros 10 elementos de x.'
  CorrectAnswer: x[1:10]
  AnswerTests: omnitest(correctExpr='x[1:10]')
  Hint: 'Veja os primeiros 10 elementos de x com x[1:10]'

- Class: text
  Output: Vetor de índice são retornados de quatro maneiras diferentes -- vetores lógicos, vetores de valores inteiros positivos, vetores de valores inteiros negativos e vetores de palavras -- todos esses abordados nesta lição.

- Class: text
  Output: 'Vamos começar com o vetores lógicos. Um cenário comum quando trabalhamos com dados do mundo real é que nós queremos extrair todos os elementos do vetor que não sejam N.A. (ex: dados perdidos). Lembre-se de que is.na(x) produz um vetor de valores lógicos com o mesmo tamanho de x, com TRUEs correspondendo a valores NA em x e FALSEs correspondendo a valores não NA em x.'
  
- Class: mult_question
  Output: O que você imagina que x[is.na(x)] retorne?
  AnswerChoices: Um vetor com todos os NAs; Um vetor sem NAs; Um vetor de TRUEs e FALSEs; Um vetor de tamanho 0
  CorrectAnswer: Um vetor com todos os NAs
  AnswerTests: omnitest(correctVal='Um vetor com todos os NAs')
  Hint: Lembre-se que is.na(x) retorna em qual posição NA se encontra dentro do vetor. Então se estabelecermos um subconjunto de x, o que você espera que aconteça?

- Class: cmd_question
  Output: Constate isso você mesmo, digitando x[is.na(x)]. 
  CorrectAnswer: x[is.na(x)]
  AnswerTests: omnitest(correctExpr='x[is.na(x)]')
  Hint: Digite x[is.na(x)] para ver que retornam todos os NAs, e isso claramente não é o que queremos!
  
- Class: cmd_question
  Output: Lembre-se de que `!` retorna a negação da expressão lógica, então !is.na(x) pode ser lido como 'não é NA'. Sendo assim, se nós queremos criar um vetor chamado y que contém todos os valores não NA de x, nós podemos usar y <- x[!is.na(x)]. Digite para ver.
  CorrectAnswer: y <- x[!is.na(x)]
  AnswerTests: omnitest(correctExpr='y <- x[!is.na(x)]')
  Hint: Digite y <- x[!is.na(x)] para capturar todos os valores não perdidos de x.
 
- Class: cmd_question
  Output: Mostre y no console.
  CorrectAnswer: y
  AnswerTests: omnitest(correctExpr='y')
  Hint: Digite y para ver o seu conteúdo
  
- Class: text
  Output: Agora que nós isolamos os valores não perdidos de x e colocamos dentro da variável y, nós podemos criar os subconjuntos que quisermos.

- Class: mult_question
  Output: Lembre-se que a expressão y > 0 vai retornar um valor lógico de mesmo tamanho que y, com TRUEs correspondentes aos valores que em y são maiores que zero e FALSEs correspondentes aos valores de y que são menores ou iguais a zero. O que você acha que y[y > 0] vai retornar?
  AnswerChoices: Um vetor com todos os elementos positivos de y; Um vetor com todos os elementos negativos de y; Um vetor com todos os NAs; Um vetor de tamanho 0; Um vetor de TRUEs e FALSEs
  CorrectAnswer: Um vetor com todos os elementos positivos de y
  AnswerTests: omnitest(correctVal="Um vetor com todos os elementos positivos de y")
  Hint: A expressão lógica de y > 0 vai retornar TRUE para cada elemento de y que for positivo. Sendo assim, o que você acha que y[y > 0] vai retornar?
  
- Class: cmd_question
  Output: Digite y[y > 0] para ver que nós teremos todos os elementos positivos de y, que são também os elementos positivos do nosso vetor original x.
  CorrectAnswer: y[y > 0]
  AnswerTests: omnitest(correctExpr='y[y > 0]')
  Hint: Digite y[y > 0] para visualizar somente os elementos de y.
  
- Class: cmd_question
  Output: Você pode se perguntar porque nós não começamos apenas com x[x > 0] para isolar os elementos positivos de x. Tente para ver por quê.
  CorrectAnswer: x[x > 0]
  AnswerTests: omnitest(correctExpr='x[x > 0]')
  Hint: Digite x[x > 0] para ver porque não utilizamos essa abordagem.
 
- Class: text
  Output: Como NA não é um valor, mas sim um espaço reservado para uma quantidade desconhecida, a expressão NA > 0 avalia para NA. Por isso, conseguimos um monte de NAs misturados com nossos números positivos quando fazemos isso.

- Class: cmd_question
  Output: Combinando o nosso conhecimento de operadores lógicos com o de subconjuntos, nós podemos fazer assim x[!is.na(x) & x > 0]. Tente.
  CorrectAnswer: x[!is.na(x) & x > 0]
  AnswerTests: omnitest(correctExpr='x[!is.na(x) & x > 0]')
  Hint: Digite x[!is.na(x) & x > 0] para ver o que retorna.

- Class: text
  Output: Nesse caso, nós solicitamos apenas os valores de x que são ao mesmo tempo não perdidos E maiores que zero.

- Class: text
  Output: Nós já mostramos para você como construir um subconjunto apenas com os primeiros dez elementos x[1:10]. Nesse caso, nós estamos providenciando um vetor de elementos positivos inteiros dentro dos colchetes, que informa ao R para retornar apenas os elementos de x numerados de 1 a 10.  

- Class: text
  Output: Muitas linguagens de programação usam o que chamamos de 'indexação baseada em zero', que significa que o primeiro elememento de um vetor é considerado elemento 0. O R utiliza a 'indexação baseada em um', que (você adivinhou!) significa que o primeiro elemento de um vetor é considerado 1.

- Class: cmd_question
  Output: Você consegue imaginar como seria um subconjunto com o 3º, o 5º e o 7º elementos de x? Sugestão -- Use a função c() para especificar o número de elementos do vetor numérico.
  CorrectAnswer: x[c(3, 5, 7)]
  AnswerTests: omnitest(correctExpr='x[c(3, 5, 7)]')
  Hint: Crie um vetor com a indexação de c(3, 5, 7), e então coloque-o entre colchetes.

- Class: cmd_question
  Output: É importante que quando utilizar valores inteiros no subconjunto do nosso vetor x, Nós ficamos com conjuntos de índices {1, 2, ..., 40} desde que x tenha somente 40 elementos. O que acontece se nós perguntarmos para o elemento na posição 0 de x (por exemplo x[0])? Tente para ver.
  CorrectAnswer: x[0]
  AnswerTests: omnitest(correctExpr='x[0]')
  Hint: Digite x[0] para ver o que aocntece quando nós nos referimos ao elemento na posição zero do vetor, como não é determinado em R.

- Class: cmd_question
  Output: Como você deve estar esperando, não retorna nada útil. Infelizmente, o R não prevê essa utilização. E se pedirmos o 3000º elemento de x? Tente.
  CorrectAnswer: x[3000]
  AnswerTests: omnitest(correctExpr='x[3000]')
  Hint: Pergunte sobre o 3000º elemento de x (que não existe) com x[3000].
 
- Class: text
  Output: Mais uma vez, nada útil é retornado, mas o R não nos impede de pedir isso. Você deve certificar-se de que o que você está pedindo está dentro dos limites do vetor com o qual você está trabalhando.

- Class: text
  Output: E se nos interessarmos por todos os elementos de x exceto o 2º e o 10º? Seria bastante tedioso construir um vetor contendo todos os números de 1 a 40, EXCETO 2 e 10.

- Class: cmd_question
  Output: Felizmente o R aceita a indexação de inteiros negativos. Enquanto que x[c(2, 10)] nos retorna apenas o 2º e o 10º elementos de x, x[c(-2, -10)]retornará todos os elementos de x EXCETO o 2º e o 10º elementos. Tente x[c(-2, -10)] agora para ver.
  CorrectAnswer: x[c(-2, -10)]
  AnswerTests: omnitest(correctExpr='x[c(-2, -10)]')
  Hint: Ofereça x[c(-2, -10)] como um teste.

- Class: cmd_question
  Output: uma maneira abreviada de especificar multiplos números negativos é colocar o sinal negativo na frente do número positivo do vetor. Digite x[-c(2, 10)] para retornar exatamente o mesmo resultado. 
  CorrectAnswer: x[-c(2, 10)]
  AnswerTests: omnitest(correctExpr='x[-c(2, 10)]')
  Hint: Use x[-c(2, 10)] para simplificar as coisas um pouco. Isso pode economizar tempo se for necessŕio especificar muitos índices negativos.

- Class: text
  Output: 'Até agora, abordamos três tipos de vetores de índice: inteiro lógico, positivo e número inteiro negativo. O único tipo restante nos obriga a introduzir o conceito de elementos "nomeados".'

- Class: cmd_question
  Output: Crie um vetor numérico com três elementos nomeados usando vect <- c(foo = 11, bar = 2, norf = NA).
  CorrectAnswer: vect <- c(foo = 11, bar = 2, norf = NA)
  AnswerTests: omnitest(correctExpr='vect <- c(foo = 11, bar = 2, norf = NA)')
  Hint: Crie um vetor nomeado com vect <- c(foo = 11, bar = 2, norf = NA).

- Class: cmd_question
  Output: Quanto digita vect no console, você verá que cada elemento tem o mesmo nome. Tente.
  CorrectAnswer: vect
  AnswerTests: omnitest(correctExpr='vect')
  Hint: Digite vect para ver seu conteúdo.

- Class: cmd_question
  Output: Nós também podemos conseguir os nomes de vect passando vect como um argumento da função names(). Digite para ver.
  CorrectAnswer: names(vect)
  AnswerTests: omnitest(correctExpr='names(vect)')
  Hint: Confira o resultado de names(vect).

- Class: cmd_question
  Output: Alternativamente, nós podemos criar um vetor vect2 com c(11, 2, NA). Faça isso agora.
  CorrectAnswer: vect2 <- c(11, 2, NA)
  AnswerTests: omnitest(correctExpr='vect2 <- c(11, 2, NA)')
  Hint: Crie um vetor (não nomeado) chamado vect2 que contém c(11, 2, NA).

- Class: cmd_question
  Output: Então nós podemos adicionar com os `nomes` atributo `names` em vect2, dessa maneira names(vect2) <- c("foo", "bar", "norf"). Vá em frente.
  CorrectAnswer: names(vect2) <- c("foo", "bar", "norf")
  AnswerTests: omnitest(correctExpr='names(vect2) <- c("foo", "bar", "norf")')
  Hint: Adicione nomes ao vect2 com names(vect2) <- c("foo", "bar", "norf").

- Class: cmd_question
  Output: Agora, vamos checar se vect e vect2 são iguais utilizando-os como argumento da função identical().
  CorrectAnswer: identical(vect, vect2)
  AnswerTests: any_of_exprs('identical(vect, vect2)', 'identical(vect2, vect)')
  Hint: A função identical() vai nos mostrar se os dois argumento são identicos.

- Class: text
  Output: De fato, vect e vect2 são vetores nomeados identicos.
 
- Class: mult_question
  Output: Agora, de volta ao assunto de subconjunto de um vetor por elementos nomeados. Qual dos seguintes comando você acha que vai retornar o segunto elemento de vect?
  AnswerChoices: vect["bar"]; vect[bar]; vect["2"]
  CorrectAnswer: vect["bar"]
  AnswerTests: omnitest(correctVal='vect["bar"]')
  Hint: Se nós queremos o elemento nomeado "bar" (ou seja, o segundo elemento de vect), qual o comando nos retornaria isso? 
  
- Class: cmd_question
  Output: Agora tente isso.
  CorrectAnswer: vect["bar"]
  AnswerTests: omnitest(correctExpr='vect["bar"]')
  Hint: Tente vect["bar"].

- Class: cmd_question
  Output: Da mesma meneira, podemos especificar um vetor de nomes com vect [c ("foo", "bar")]. Experimente.
  CorrectAnswer: vect[c("foo", "bar")]
  AnswerTests: omnitest(correctExpr='vect[c("foo", "bar")]')
  Hint: Use vect[c("foo", "bar")] para retornar apenas elementos de vect nomeados como "foo" e "bar".

- Class: text
  Output: Agora você conhece todos os quatro métodos de subconjuntos de dados de vetores. Abordagens diferentes são melhores em cenários diferentes e em caso de dúvidas, experimente!

- Class: mult_question
  Output: Você gostaria de informar alguém sobre a conclusão dessa aula com sucesso?
  CorrectAnswer: NULL
  AnswerChoices: Sim; Não
  AnswerTests: notify()
  Hint: NULL
